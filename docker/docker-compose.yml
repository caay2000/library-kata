version: '2.2'
services:
    postgres:
        image: packages.dns.myexample.com:5000/postgres:10.7
        command: postgres -c 'max_connections=200'
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DATABASES: >
                collections-rm,
                collections-rm_api_tests,
                collections-rm_rms_tests,
                collections-scheduler,
                collections-events-rm,
                collections-member-state,
                breathing-space
        volumes:
            - ./docker/postgres/scripts:/docker-entrypoint-initdb.d:ro
            - ./docker/postgres/data:/var/lib/postgresql/data
        ports:
            - 5432:5432
        mem_limit: 600m
        logging:
            driver: ${LOG_DRIVER}

    zookeeper:
        image: packages.dns.myexample.com:5000/confluentinc/cp-zookeeper:6.0.1
        ports:
            - 2181:2181
        environment:
            ZOOKEEPER_SERVER_ID: 1
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
            ZOOKEEPER_INIT_LIMIT: 5
            ZOOKEEPER_SYNC_LIMIT: 2
        mem_limit: 200m
        logging:
            driver: ${LOG_DRIVER}

    kafka:
        image: packages.dns.myexample.com:5000/confluentinc/cp-kafka:6.0.1
        depends_on:
            - zookeeper
        ports:
            - 9092:9092
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: SSL://kafka:29092,SSL_HOST://localhost:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SSL:SSL,SSL_HOST:SSL
            KAFKA_SSL_KEYSTORE_FILENAME: ks.jks
            KAFKA_SSL_KEYSTORE_CREDENTIALS: broker1_keystore_creds
            KAFKA_SSL_KEY_CREDENTIALS: broker1_sslkey_creds
            KAFKA_SSL_TRUSTSTORE_FILENAME: ts.jks
            KAFKA_SSL_TRUSTSTORE_CREDENTIALS: broker1_truststore_creds
            KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
            KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
            KAFKA_SSL_CLIENT_AUTH: requested
            KAFKA_DELETE_TOPIC_ENABLE: "true"
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
            KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR
            KAFKA_TRANSACTION_STATE_LOG_NUM_PARTITIONS: 1
        volumes:
            - ./docker/kafka/secrets:/etc/kafka/secrets
        mem_limit: 1500m
        logging:
            driver: ${LOG_DRIVER}

    schema-registry:
        image: packages.dns.myexample.com:5000/confluentinc/cp-schema-registry:6.0.1
        depends_on:
            - zookeeper
            - kafka
        ports:
            - 8081:8081
        environment:
            SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
            SCHEMA_REGISTRY_HOST_NAME: schema-registry
            SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
            SCHEMA_REGISTRY_KAFKASTORE_SSL_KEY_PASSWORD: myexampledev
            SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/ks.jks
            SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_PASSWORD: myexampledev
            SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/ts.jks
            SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_PASSWORD: myexampledev
            SCHEMA_REGISTRY_KAFKASTORE_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: " "
            SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: SSL
            SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: SSL://kafka:29092
            SCHEMA_REGISTRY_DEBUG: "true"
        volumes:
            - ./docker/kafka/secrets:/etc/kafka/secrets:ro
        mem_limit: 1g
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://0.0.0.0:8081" ]
            interval: 30s
            timeout: 10s
            retries: 10
        logging:
            driver: ${LOG_DRIVER}

    wiremock:
        image: packages.dns.ad.myexample.com:5002/myexample-wiremock:0.1.20
        expose:
            - 8080
        ports:
            - 9080:8080
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:8080/__admin/mappings" ]
            interval: 0m30s
            timeout: 10s
            retries: 3
        logging:
            driver: ${LOG_DRIVER}

    rialtodb:
        build: ./docker/rialto
        container_name: rialtodb
        restart: always
        ports:
            - 1533:1433
        logging:
            driver: ${LOG_DRIVER}
